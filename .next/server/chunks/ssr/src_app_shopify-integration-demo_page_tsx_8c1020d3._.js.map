{"version":3,"sources":["turbopack:///[project]/src/app/shopify-integration-demo/page.tsx","turbopack:///[project]/src/lib/shopify-content-manager.ts"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { RefreshCw, CheckCircle, AlertCircle, Info } from 'lucide-react';\r\nimport { useShopifyProducts, useShopifyCollections, useShopifyFeaturedCollections } from '@/lib/shopify-content-manager';\r\nimport GlobalLayout from '@/components/layout/GlobalLayout';\r\n\r\n// Example of how to use real Shopify data\r\nexport default function ShopifyIntegrationDemo() {\r\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  // Use real Shopify data hooks\r\n  const { products, loading: productsLoading, error: productsError } = useShopifyProducts();\r\n  const { collections, loading: collectionsLoading, error: collectionsError } = useShopifyCollections();\r\n  const { featuredCollections, loading: featuredLoading, error: featuredError } = useShopifyFeaturedCollections();\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    // Simulate refresh\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    setLastUpdate(new Date());\r\n    setIsRefreshing(false);\r\n  };\r\n\r\n  return (\r\n    <GlobalLayout>\r\n      <div className=\"min-h-screen bg-gradient-to-br from-champagne-nude/30 to-elegant-base/30 dark:from-champagne-nude/20 dark:to-elegant-base/20 py-8\">\r\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          {/* Header */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5 }}\r\n            className=\"text-center mb-12\"\r\n          >\r\n            <h1 className=\"text-4xl font-cormorant font-bold text-deep-black dark:text-ivory-white mb-4\">\r\n              Shopify Integration Demo\r\n            </h1>\r\n            <p className=\"text-lg text-font-secondary dark:text-font-secondary-dark font-josefin max-w-2xl mx-auto\">\r\n              Real-time data synchronization with Shopify Admin API\r\n            </p>\r\n            \r\n            <div className=\"mt-6 flex items-center justify-center space-x-4\">\r\n              <button\r\n                onClick={handleRefresh}\r\n                disabled={isRefreshing}\r\n                className=\"flex items-center space-x-2 px-4 py-2 bg-soft-gold text-deep-black rounded-lg hover:bg-bright-gold transition-colors disabled:opacity-50\"\r\n              >\r\n                <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n                <span>Refresh Data</span>\r\n              </button>\r\n              \r\n              {lastUpdate && (\r\n                <div className=\"flex items-center space-x-2 text-sm text-font-secondary dark:text-font-secondary-dark\">\r\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n                  <span>Last updated: {lastUpdate.toLocaleTimeString()}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n            {/* Products Status */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.5, delay: 0.1 }}\r\n              className=\"bg-white dark:bg-deep-black rounded-lg shadow-lg p-6\"\r\n            >\r\n              <div className=\"flex items-center space-x-3 mb-4\">\r\n                <div className={`w-3 h-3 rounded-full ${\r\n                  productsLoading ? 'bg-yellow-500' : \r\n                  productsError ? 'bg-red-500' : 'bg-green-500'\r\n                }`} />\r\n                <h2 className=\"text-xl font-cormorant font-bold text-deep-black dark:text-ivory-white\">\r\n                  Products\r\n                </h2>\r\n              </div>\r\n              \r\n              {productsLoading ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <RefreshCw className=\"w-4 h-4 animate-spin text-soft-gold\" />\r\n                  <span className=\"text-font-secondary dark:text-font-secondary-dark\">Loading...</span>\r\n                </div>\r\n              ) : productsError ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <AlertCircle className=\"w-4 h-4 text-red-500\" />\r\n                  <span className=\"text-red-600 dark:text-red-400\">{productsError}</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"text-2xl font-josefin font-bold text-soft-gold\">\r\n                    {products.length}\r\n                  </div>\r\n                  <div className=\"text-sm text-font-secondary dark:text-font-secondary-dark\">\r\n                    Products synced from Shopify\r\n                  </div>\r\n                  <div className=\"text-xs text-font-secondary dark:text-font-secondary-dark\">\r\n                    Updates automatically via webhooks\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </motion.div>\r\n\r\n            {/* Collections Status */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.5, delay: 0.2 }}\r\n              className=\"bg-white dark:bg-deep-black rounded-lg shadow-lg p-6\"\r\n            >\r\n              <div className=\"flex items-center space-x-3 mb-4\">\r\n                <div className={`w-3 h-3 rounded-full ${\r\n                  collectionsLoading ? 'bg-yellow-500' : \r\n                  collectionsError ? 'bg-red-500' : 'bg-green-500'\r\n                }`} />\r\n                <h2 className=\"text-xl font-cormorant font-bold text-deep-black dark:text-ivory-white\">\r\n                  Collections\r\n                </h2>\r\n              </div>\r\n              \r\n              {collectionsLoading ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <RefreshCw className=\"w-4 h-4 animate-spin text-soft-gold\" />\r\n                  <span className=\"text-font-secondary dark:text-font-secondary-dark\">Loading...</span>\r\n                </div>\r\n              ) : collectionsError ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <AlertCircle className=\"w-4 h-4 text-red-500\" />\r\n                  <span className=\"text-red-600 dark:text-red-400\">{collectionsError}</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"text-2xl font-josefin font-bold text-soft-gold\">\r\n                    {collections.length}\r\n                  </div>\r\n                  <div className=\"text-sm text-font-secondary dark:text-font-secondary-dark\">\r\n                    Collections synced from Shopify\r\n                  </div>\r\n                  <div className=\"text-xs text-font-secondary dark:text-font-secondary-dark\">\r\n                    Featured collections auto-update\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </motion.div>\r\n\r\n            {/* Featured Collections Status */}\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.5, delay: 0.3 }}\r\n              className=\"bg-white dark:bg-deep-black rounded-lg shadow-lg p-6\"\r\n            >\r\n              <div className=\"flex items-center space-x-3 mb-4\">\r\n                <div className={`w-3 h-3 rounded-full ${\r\n                  featuredLoading ? 'bg-yellow-500' : \r\n                  featuredError ? 'bg-red-500' : 'bg-green-500'\r\n                }`} />\r\n                <h2 className=\"text-xl font-cormorant font-bold text-deep-black dark:text-ivory-white\">\r\n                  Featured\r\n                </h2>\r\n              </div>\r\n              \r\n              {featuredLoading ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <RefreshCw className=\"w-4 h-4 animate-spin text-soft-gold\" />\r\n                  <span className=\"text-font-secondary dark:text-font-secondary-dark\">Loading...</span>\r\n                </div>\r\n              ) : featuredError ? (\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <AlertCircle className=\"w-4 h-4 text-red-500\" />\r\n                  <span className=\"text-red-600 dark:text-red-400\">{featuredError}</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"text-2xl font-josefin font-bold text-soft-gold\">\r\n                    {featuredCollections.length}\r\n                  </div>\r\n                  <div className=\"text-sm text-font-secondary dark:text-font-secondary-dark\">\r\n                    Featured collections\r\n                  </div>\r\n                  <div className=\"text-xs text-font-secondary dark:text-font-secondary-dark\">\r\n                    Controlled by metafields\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </motion.div>\r\n          </div>\r\n\r\n          {/* Integration Features */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.4 }}\r\n            className=\"mt-12\"\r\n          >\r\n            <div className=\"bg-white dark:bg-deep-black rounded-lg shadow-lg p-8\">\r\n              <h2 className=\"text-2xl font-cormorant font-bold text-deep-black dark:text-ivory-white mb-6\">\r\n                Automatic Updates\r\n              </h2>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\r\n                    <h3 className=\"text-lg font-cormorant font-semibold text-deep-black dark:text-ivory-white\">\r\n                      Products\r\n                    </h3>\r\n                  </div>\r\n                  <ul className=\"text-sm text-font-secondary dark:text-font-secondary-dark space-y-1\">\r\n                    <li>• New products auto-appear</li>\r\n                    <li>• Updates reflect immediately</li>\r\n                    <li>• Deleted products removed</li>\r\n                    <li>• Inventory syncs real-time</li>\r\n                    <li>• Price changes update instantly</li>\r\n                  </ul>\r\n                </div>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\r\n                    <h3 className=\"text-lg font-cormorant font-semibold text-deep-black dark:text-ivory-white\">\r\n                      Collections\r\n                    </h3>\r\n                  </div>\r\n                  <ul className=\"text-sm text-font-secondary dark:text-font-secondary-dark space-y-1\">\r\n                    <li>• New collections auto-create</li>\r\n                    <li>• Featured status via metafields</li>\r\n                    <li>• Product assignments sync</li>\r\n                    <li>• Collection images update</li>\r\n                    <li>• Sort order maintained</li>\r\n                  </ul>\r\n                </div>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\r\n                    <h3 className=\"text-lg font-cormorant font-semibold text-deep-black dark:text-ivory-white\">\r\n                      Content\r\n                    </h3>\r\n                  </div>\r\n                  <ul className=\"text-sm text-font-secondary dark:text-font-secondary-dark space-y-1\">\r\n                    <li>• Descriptions auto-update</li>\r\n                    <li>• Images sync from Shopify</li>\r\n                    <li>• Tags create categories</li>\r\n                    <li>• SEO data maintained</li>\r\n                    <li>• Search index updates</li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n\r\n          {/* Webhook Status */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.5 }}\r\n            className=\"mt-8\"\r\n          >\r\n            <div className=\"bg-white dark:bg-deep-black rounded-lg shadow-lg p-8\">\r\n              <h2 className=\"text-2xl font-cormorant font-bold text-deep-black dark:text-ivory-white mb-6\">\r\n                Webhook Configuration\r\n              </h2>\r\n              \r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <Info className=\"w-5 h-5 text-blue-500\" />\r\n                  <span className=\"text-font-secondary dark:text-font-secondary-dark\">\r\n                    Webhook URL: <code className=\"bg-elegant-base/20 px-2 py-1 rounded\">https://yourdomain.com/api/webhooks/shopify</code>\r\n                  </span>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\r\n                    <div className=\"text-sm font-josefin font-semibold text-green-800 dark:text-green-200\">Products</div>\r\n                    <div className=\"text-xs text-green-600 dark:text-green-400\">create/update/delete</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n                    <div className=\"text-sm font-josefin font-semibold text-blue-800 dark:text-blue-200\">Collections</div>\r\n                    <div className=\"text-xs text-blue-600 dark:text-blue-400\">create/update/delete</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\r\n                    <div className=\"text-sm font-josefin font-semibold text-purple-800 dark:text-purple-200\">Orders</div>\r\n                    <div className=\"text-xs text-purple-600 dark:text-purple-400\">create/update/paid</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\r\n                    <div className=\"text-sm font-josefin font-semibold text-orange-800 dark:text-orange-200\">Inventory</div>\r\n                    <div className=\"text-xs text-orange-600 dark:text-orange-400\">real-time sync</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </GlobalLayout>\r\n  );\r\n}\r\n\r\n","'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Shopify Admin API integration for dynamic content management\r\nexport interface ShopifyProduct {\r\n  id: string;\r\n  title: string;\r\n  handle: string;\r\n  description: string;\r\n  images: {\r\n    id: string;\r\n    url: string;\r\n    altText?: string;\r\n  }[];\r\n  variants: {\r\n    id: string;\r\n    title: string;\r\n    price: string;\r\n    compareAtPrice?: string;\r\n    availableForSale: boolean;\r\n    selectedOptions: {\r\n      name: string;\r\n      value: string;\r\n    }[];\r\n  }[];\r\n  tags: string[];\r\n  productType: string;\r\n  vendor: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  featuredImage?: {\r\n    url: string;\r\n    altText?: string;\r\n  };\r\n}\r\n\r\nexport interface ShopifyCollection {\r\n  id: string;\r\n  title: string;\r\n  handle: string;\r\n  description: string;\r\n  image?: {\r\n    url: string;\r\n    altText?: string;\r\n  };\r\n  products: ShopifyProduct[];\r\n  productsCount: number;\r\n  sortOrder: string;\r\n  templateSuffix?: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface ShopifyMetafield {\r\n  id: string;\r\n  namespace: string;\r\n  key: string;\r\n  value: string;\r\n  type: string;\r\n}\r\n\r\n// Dynamic content management system\r\nexport class ShopifyContentManager {\r\n  private adminApiUrl: string;\r\n  private accessToken: string;\r\n\r\n  constructor(adminApiUrl: string, accessToken: string) {\r\n    this.adminApiUrl = adminApiUrl;\r\n    this.accessToken = accessToken;\r\n  }\r\n\r\n  // Fetch all products with pagination\r\n  async fetchProducts(first: number = 50, after?: string): Promise<{\r\n    products: ShopifyProduct[];\r\n    hasNextPage: boolean;\r\n    endCursor?: string;\r\n  }> {\r\n    const query = `\r\n      query getProducts($first: Int!, $after: String) {\r\n        products(first: $first, after: $after) {\r\n          edges {\r\n            node {\r\n              id\r\n              title\r\n              handle\r\n              description\r\n              productType\r\n              vendor\r\n              tags\r\n              createdAt\r\n              updatedAt\r\n              images(first: 10) {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    url\r\n                    altText\r\n                  }\r\n                }\r\n              }\r\n              variants(first: 100) {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    title\r\n                    price {\r\n                      amount\r\n                      currencyCode\r\n                    }\r\n                    compareAtPrice {\r\n                      amount\r\n                      currencyCode\r\n                    }\r\n                    availableForSale\r\n                    selectedOptions {\r\n                      name\r\n                      value\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              featuredImage {\r\n                url\r\n                altText\r\n              }\r\n            }\r\n          }\r\n          pageInfo {\r\n            hasNextPage\r\n            endCursor\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    const response = await this.makeRequest(query, { first, after });\r\n    const products = response.data.products.edges.map((edge: any) => this.transformProduct(edge.node));\r\n    \r\n    return {\r\n      products,\r\n      hasNextPage: response.data.products.pageInfo.hasNextPage,\r\n      endCursor: response.data.products.pageInfo.endCursor\r\n    };\r\n  }\r\n\r\n  // Fetch all collections\r\n  async fetchCollections(): Promise<ShopifyCollection[]> {\r\n    const query = `\r\n      query getCollections {\r\n        collections(first: 50) {\r\n          edges {\r\n            node {\r\n              id\r\n              title\r\n              handle\r\n              description\r\n              image {\r\n                url\r\n                altText\r\n              }\r\n              productsCount\r\n              sortOrder\r\n              templateSuffix\r\n              updatedAt\r\n              products(first: 20) {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    title\r\n                    handle\r\n                    featuredImage {\r\n                      url\r\n                      altText\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    const response = await this.makeRequest(query);\r\n    return response.data.collections.edges.map((edge: any) => this.transformCollection(edge.node));\r\n  }\r\n\r\n  // Fetch featured collections (using metafields)\r\n  async fetchFeaturedCollections(): Promise<ShopifyCollection[]> {\r\n    const query = `\r\n      query getFeaturedCollections {\r\n        collections(first: 50) {\r\n          edges {\r\n            node {\r\n              id\r\n              title\r\n              handle\r\n              description\r\n              image {\r\n                url\r\n                altText\r\n              }\r\n              metafields(first: 10, namespace: \"custom\") {\r\n                edges {\r\n                  node {\r\n                    key\r\n                    value\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    const response = await this.makeRequest(query);\r\n    const collections = response.data.collections.edges.map((edge: any) => this.transformCollection(edge.node));\r\n    \r\n    // Filter collections with featured metafield\r\n    return collections.filter(collection => \r\n      collection.metafields?.some((metafield: any) => \r\n        metafield.key === 'featured' && metafield.value === 'true'\r\n      )\r\n    );\r\n  }\r\n\r\n  // Fetch products by collection\r\n  async fetchProductsByCollection(collectionHandle: string): Promise<ShopifyProduct[]> {\r\n    const query = `\r\n      query getCollectionProducts($handle: String!) {\r\n        collection(handle: $handle) {\r\n          products(first: 50) {\r\n            edges {\r\n              node {\r\n                id\r\n                title\r\n                handle\r\n                description\r\n                productType\r\n                vendor\r\n                tags\r\n                images(first: 10) {\r\n                  edges {\r\n                    node {\r\n                      id\r\n                      url\r\n                      altText\r\n                    }\r\n                  }\r\n                }\r\n                variants(first: 100) {\r\n                  edges {\r\n                    node {\r\n                      id\r\n                      title\r\n                      price {\r\n                        amount\r\n                        currencyCode\r\n                      }\r\n                      compareAtPrice {\r\n                        amount\r\n                        currencyCode\r\n                      }\r\n                      availableForSale\r\n                      selectedOptions {\r\n                        name\r\n                        value\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                featuredImage {\r\n                  url\r\n                  altText\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    const response = await this.makeRequest(query, { handle: collectionHandle });\r\n    return response.data.collection.products.edges.map((edge: any) => this.transformProduct(edge.node));\r\n  }\r\n\r\n  // Search products\r\n  async searchProducts(query: string, first: number = 20): Promise<ShopifyProduct[]> {\r\n    const searchQuery = `\r\n      query searchProducts($query: String!, $first: Int!) {\r\n        products(first: $first, query: $query) {\r\n          edges {\r\n            node {\r\n              id\r\n              title\r\n              handle\r\n              description\r\n              productType\r\n              vendor\r\n              tags\r\n              images(first: 5) {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    url\r\n                    altText\r\n                  }\r\n                }\r\n              }\r\n              variants(first: 10) {\r\n                edges {\r\n                  node {\r\n                    id\r\n                    title\r\n                    price {\r\n                      amount\r\n                      currencyCode\r\n                    }\r\n                    compareAtPrice {\r\n                      amount\r\n                      currencyCode\r\n                    }\r\n                    availableForSale\r\n                    selectedOptions {\r\n                      name\r\n                      value\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              featuredImage {\r\n                url\r\n                altText\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    const response = await this.makeRequest(searchQuery, { query, first });\r\n    return response.data.products.edges.map((edge: any) => this.transformProduct(edge.node));\r\n  }\r\n\r\n  // Update collection metafields for featured status\r\n  async updateCollectionMetafield(collectionId: string, key: string, value: string): Promise<void> {\r\n    const mutation = `\r\n      mutation updateCollectionMetafield($input: CollectionInput!) {\r\n        collectionUpdate(input: $input) {\r\n          collection {\r\n            id\r\n          }\r\n          userErrors {\r\n            field\r\n            message\r\n          }\r\n        }\r\n      }\r\n    `;\r\n\r\n    await this.makeRequest(mutation, {\r\n      input: {\r\n        id: collectionId,\r\n        metafields: [{\r\n          namespace: 'custom',\r\n          key,\r\n          value,\r\n          type: 'single_line_text_field'\r\n        }]\r\n      }\r\n    });\r\n  }\r\n\r\n  // Transform Shopify product to our format\r\n  private transformProduct(shopifyProduct: any): ShopifyProduct {\r\n    return {\r\n      id: shopifyProduct.id,\r\n      title: shopifyProduct.title,\r\n      handle: shopifyProduct.handle,\r\n      description: shopifyProduct.description,\r\n      images: shopifyProduct.images.edges.map((edge: any) => ({\r\n        id: edge.node.id,\r\n        url: edge.node.url,\r\n        altText: edge.node.altText\r\n      })),\r\n      variants: shopifyProduct.variants.edges.map((edge: any) => ({\r\n        id: edge.node.id,\r\n        title: edge.node.title,\r\n        price: edge.node.price.amount,\r\n        compareAtPrice: edge.node.compareAtPrice?.amount,\r\n        availableForSale: edge.node.availableForSale,\r\n        selectedOptions: edge.node.selectedOptions\r\n      })),\r\n      tags: shopifyProduct.tags,\r\n      productType: shopifyProduct.productType,\r\n      vendor: shopifyProduct.vendor,\r\n      createdAt: shopifyProduct.createdAt,\r\n      updatedAt: shopifyProduct.updatedAt,\r\n      featuredImage: shopifyProduct.featuredImage\r\n    };\r\n  }\r\n\r\n  // Transform Shopify collection to our format\r\n  private transformCollection(shopifyCollection: any): ShopifyCollection {\r\n    return {\r\n      id: shopifyCollection.id,\r\n      title: shopifyCollection.title,\r\n      handle: shopifyCollection.handle,\r\n      description: shopifyCollection.description,\r\n      image: shopifyCollection.image,\r\n      products: shopifyCollection.products?.edges.map((edge: any) => this.transformProduct(edge.node)) || [],\r\n      productsCount: shopifyCollection.productsCount,\r\n      sortOrder: shopifyCollection.sortOrder,\r\n      templateSuffix: shopifyCollection.templateSuffix,\r\n      updatedAt: shopifyCollection.updatedAt\r\n    };\r\n  }\r\n\r\n  // Make GraphQL request to Shopify Admin API\r\n  private async makeRequest(query: string, variables?: any): Promise<any> {\r\n    const response = await fetch(`${this.adminApiUrl}/admin/api/2024-01/graphql.json`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Shopify-Access-Token': this.accessToken\r\n      },\r\n      body: JSON.stringify({\r\n        query,\r\n        variables\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Shopify API error: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (data.errors) {\r\n      throw new Error(`GraphQL errors: ${JSON.stringify(data.errors)}`);\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\n// React hooks for Shopify integration\r\nexport function useShopifyProducts() {\r\n  const [products, setProducts] = useState<ShopifyProduct[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const contentManager = new ShopifyContentManager(\r\n          process.env.NEXT_PUBLIC_SHOPIFY_DOMAIN!,\r\n          process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!\r\n        );\r\n        \r\n        const result = await contentManager.fetchProducts();\r\n        setProducts(result.products);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch products');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  return { products, loading, error };\r\n}\r\n\r\nexport function useShopifyCollections() {\r\n  const [collections, setCollections] = useState<ShopifyCollection[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCollections = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const contentManager = new ShopifyContentManager(\r\n          process.env.NEXT_PUBLIC_SHOPIFY_DOMAIN!,\r\n          process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!\r\n        );\r\n        \r\n        const collections = await contentManager.fetchCollections();\r\n        setCollections(collections);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch collections');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCollections();\r\n  }, []);\r\n\r\n  return { collections, loading, error };\r\n}\r\n\r\nexport function useShopifyFeaturedCollections() {\r\n  const [featuredCollections, setFeaturedCollections] = useState<ShopifyCollection[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchFeaturedCollections = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const contentManager = new ShopifyContentManager(\r\n          process.env.NEXT_PUBLIC_SHOPIFY_DOMAIN!,\r\n          process.env.SHOPIFY_ADMIN_ACCESS_TOKEN!\r\n        );\r\n        \r\n        const collections = await contentManager.fetchFeaturedCollections();\r\n        setFeaturedCollections(collections);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch featured collections');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFeaturedCollections();\r\n  }, []);\r\n\r\n  return { featuredCollections, loading, error };\r\n}\r\n\r\n// Webhook handlers for real-time updates\r\nexport class ShopifyWebhookHandler {\r\n  static async handleProductUpdate(productData: any): Promise<void> {\r\n    // Update product in your database/cache\r\n    console.log('Product updated:', productData);\r\n    \r\n    // Trigger revalidation of product pages\r\n    // await revalidatePath(`/products/${productData.handle}`);\r\n  }\r\n\r\n  static async handleCollectionUpdate(collectionData: any): Promise<void> {\r\n    // Update collection in your database/cache\r\n    console.log('Collection updated:', collectionData);\r\n    \r\n    // Trigger revalidation of collection pages\r\n    // await revalidatePath(`/collections/${collectionData.handle}`);\r\n  }\r\n\r\n  static async handleProductCreate(productData: any): Promise<void> {\r\n    // Add new product to your database/cache\r\n    console.log('New product created:', productData);\r\n  }\r\n\r\n  static async handleProductDelete(productData: any): Promise<void> {\r\n    // Remove product from your database/cache\r\n    console.log('Product deleted:', productData);\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"qFAEA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAAA,EAAA,EAAA,CAAA,CAAA,OAAA,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,CAAA,MC0DO,OAAM,EACH,WAAoB,CACpB,WAAoB,AAE5B,aAAY,CAAmB,CAAE,CAAmB,CAAE,CACpD,IAAI,CAAC,WAAW,CAAG,EACnB,IAAI,CAAC,WAAW,CAAG,CACrB,CAGA,MAAM,cAAc,EAAgB,EAAE,CAAE,CAAc,CAInD,CACD,IAAM,EAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwDf,CAAC,CAEK,EAAW,MAAM,IAAI,CAAC,WAAW,CAAC,EAAO,CAAE,QAAO,OAAM,GAG9D,MAAO,CACL,SAHe,EAAS,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAc,IAAI,CAAC,gBAAgB,CAAC,EAAK,IAAI,GAI9F,YAAa,EAAS,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CACxD,UAAW,EAAS,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,AACtD,CACF,CAGA,MAAM,kBAAiD,CACrD,IAAM,EAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCf,CAAC,CAGD,MAAO,CADU,MAAM,IAAI,CAAC,WAAW,CAAC,EAAA,EACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAc,IAAI,CAAC,mBAAmB,CAAC,EAAK,IAAI,EAC9F,CAGA,MAAM,0BAAyD,CAC7D,IAAM,EAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAyBf,CAAC,CAMD,MAHoB,AAGb,CAJU,MAAM,IAAI,CAAC,WAAW,CAAC,EAAA,EACX,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAc,IAAI,CAAC,mBAAmB,CAAC,EAAK,IAAI,GAGtF,MAAM,CAAC,GACxB,EAAW,UAAU,EAAE,KAAK,AAAC,GACT,aAAlB,EAAU,GAAG,EAAuC,SAApB,EAAU,KAAK,EAGrD,CAGA,MAAM,0BAA0B,CAAwB,CAA6B,CACnF,IAAM,EAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoDf,CAAC,CAGD,MAAO,CADU,MAAM,IAAI,CAAC,WAAW,CAAC,EAAO,CAAE,OAAQ,CAAiB,EAAA,EAC1D,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAc,IAAI,CAAC,gBAAgB,CAAC,EAAK,IAAI,EACnG,CAGA,MAAM,eAAe,CAAa,CAAE,EAAgB,EAAE,CAA6B,CACjF,IAAM,EAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkDrB,CAAC,CAGD,MAAO,CADU,MAAM,IAAI,CAAC,WAAW,CAAC,EAAa,CAAE,cAAO,CAAM,EAAA,EACpD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAc,IAAI,CAAC,gBAAgB,CAAC,EAAK,IAAI,EACxF,CAGA,MAAM,0BAA0B,CAAoB,CAAE,CAAW,CAAE,CAAa,CAAiB,CAC/F,IAAM,EAAW,CAAC;;;;;;;;;;;;IAYlB,CAAC,AAED,OAAM,IAAI,CAAC,WAAW,CAAC,EAAU,CAC/B,MAAO,CACL,GAAI,EACJ,WAAY,CAAC,CACX,UAAW,aACX,QACA,EACA,KAAM,wBACR,EACF,AADI,CAEN,EACF,CAGQ,iBAAiB,CAAmB,CAAkB,CAC5D,MAAO,CACL,GAAI,EAAe,EAAE,CACrB,MAAO,EAAe,KAAK,CAC3B,OAAQ,EAAe,MAAM,CAC7B,YAAa,EAAe,WAAW,CACvC,OAAQ,EAAe,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,IAAe,CACtD,EADqD,CACjD,EAAK,IAAI,CAAC,EAAE,CAChB,IAAK,EAAK,IAAI,CAAC,GAAG,CAClB,QAAS,EAAK,IAAI,CAAC,OAAO,CAC5B,CAAC,EACD,SAAU,EAAe,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,IAAe,CAC1D,EADyD,CACrD,EAAK,IAAI,CAAC,EAAE,CAChB,MAAO,EAAK,IAAI,CAAC,KAAK,CACtB,MAAO,EAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAC7B,eAAgB,EAAK,IAAI,CAAC,cAAc,EAAE,OAC1C,iBAAkB,EAAK,IAAI,CAAC,gBAAgB,CAC5C,gBAAiB,EAAK,IAAI,CAAC,eAAe,CAC5C,CAAC,EACD,KAAM,EAAe,IAAI,CACzB,YAAa,EAAe,WAAW,CACvC,OAAQ,EAAe,MAAM,CAC7B,UAAW,EAAe,SAAS,CACnC,UAAW,EAAe,SAAS,CACnC,cAAe,EAAe,aAAa,AAC7C,CACF,CAGQ,oBAAoB,CAAsB,CAAqB,CACrE,MAAO,CACL,GAAI,EAAkB,EAAE,CACxB,MAAO,EAAkB,KAAK,CAC9B,OAAQ,EAAkB,MAAM,CAChC,YAAa,EAAkB,WAAW,CAC1C,MAAO,EAAkB,KAAK,CAC9B,SAAU,EAAkB,QAAQ,EAAE,MAAM,IAAI,AAAC,GAAc,IAAI,CAAC,gBAAgB,CAAC,EAAK,IAAI,IAAM,EAAE,CACtG,cAAe,EAAkB,aAAa,CAC9C,UAAW,EAAkB,SAAS,CACtC,eAAgB,EAAkB,cAAc,CAChD,UAAW,EAAkB,SAAS,AACxC,CACF,CAGA,MAAc,YAAY,CAAa,CAAE,CAAe,CAAgB,CACtE,IAAM,EAAW,MAAM,MAAM,CAAA,EAAG,IAAI,CAAC,WAAW,CAAC,+BAA+B,CAAC,CAAE,CACjF,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,yBAA0B,IAAI,CAAC,WAAW,AAC5C,EACA,KAAM,KAAK,SAAS,CAAC,OACnB,YACA,CACF,EACF,GAEA,GAAI,CAAC,EAAS,EAAE,CACd,CADgB,KACV,AAAI,MAAM,CAAC,mBAAmB,EAAE,EAAS,UAAU,CAAA,CAAE,EAG7D,IAAM,EAAO,MAAM,EAAS,IAAI,GAEhC,GAAI,EAAK,MAAM,CACb,CADe,KACT,AAAI,MAAM,CAAC,gBAAgB,EAAE,KAAK,SAAS,CAAC,EAAK,MAAM,EAAA,CAAG,EAGlE,OAAO,CACT,CACF,CDvbA,IAAA,EAAA,EAAA,CAAA,CAAA,OAGe,SAAS,IACtB,GAAM,CAAC,EAAY,EAAc,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAc,MACpD,CAAC,EAAc,EAAgB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GAG3C,UAAE,CAAQ,CAAE,QAAS,CAAe,CAAE,MAAO,CAAa,CAAE,CCkb7D,ADlbgE,SCkbvD,EACd,GAAM,CAAC,EAAU,EAAY,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAA2B,EAAE,EACvD,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IACjC,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAgB,MAuBlD,MArBA,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KAkBR,CAjBsB,UACpB,GAAI,CACF,GAAW,GACX,IAAM,EAAiB,IAAI,EACzB,QAAQ,GAAG,CAAC,0BAA0B,CACtC,QAAQ,GAAG,CAAC,0BAA0B,EAGlC,EAAS,MAAM,EAAe,aAAa,GACjD,EAAY,EAAO,QAAQ,CAC7B,CAAE,MAAO,EAAK,CACZ,EAAS,aAAe,MAAQ,EAAI,OAAO,CAAG,2BAChD,QAAU,CACR,GAAW,EACb,EACF,GAGF,EAAG,EAAE,EAEE,UAAE,UAAU,QAAS,CAAM,CACpC,ID5cQ,aAAE,CAAW,CAAE,QAAS,CAAkB,CAAE,MAAO,CAAgB,CAAE,CAAG,AC8czE,SAAS,EACd,GAAM,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAsB,EAAE,EAChE,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GACjC,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAgB,MAuBlD,MArBA,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KAkBR,CAjByB,UACvB,GAAI,CACF,GAAW,GACX,IAAM,EAAiB,IAAI,EACzB,QAAQ,GAAG,CAAC,0BAA0B,CACtC,QAAQ,GAAG,CAAC,0BAA0B,EAGlC,EAAc,MAAM,EAAe,gBAAgB,GACzD,EAAe,EACjB,CAAE,MAAO,EAAK,CACZ,EAAS,aAAe,MAAQ,EAAI,OAAO,CAAG,8BAChD,QAAU,CACR,GAAW,EACb,EACF,GAGF,EAAG,EAAE,EAEE,aAAE,UAAa,QAAS,CAAM,CACvC,IDxeQ,qBAAE,CAAmB,CAAE,QAAS,CAAe,CAAE,MAAO,CAAa,CAAE,CC0exE,AD1e2E,SC0elE,EACd,GAAM,CAAC,EAAqB,EAAuB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAsB,EAAE,EAChF,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,GAAC,GACjC,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAgB,MAuBlD,MArBA,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KAkBR,AAjBiC,WAC/B,GAAI,CACF,GAAW,GACX,IAAM,EAAiB,IAAI,EACzB,QAAQ,GAAG,CAAC,0BAA0B,CACtC,QAAQ,GAAG,CAAC,0BAA0B,EAGlC,EAAc,MAAM,EAAe,wBAAwB,GACjE,EAAuB,EACzB,CAAE,MAAO,EAAK,CACZ,EAAS,aAAe,MAAQ,EAAI,OAAO,CAAG,uCAChD,QAAU,CACR,GAAW,EACb,EACF,GAGF,EAAG,EAAE,EAEE,qBAAE,UAAqB,QAAS,CAAM,CAC/C,IDngBQ,EAAgB,UACpB,GAAgB,GAEhB,MAAM,IAAI,QAAQ,GAAW,WAAW,EAAS,MACjD,EAAc,IAAI,MAClB,GAAgB,EAClB,EAEA,MACE,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,OAAY,CAAA,UACX,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,6IACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,mDAEb,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,EAAI,EAC5B,UAAU,8BAEV,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,wFAA+E,6BAG7F,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,oGAA2F,0DAIxG,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,4DACb,CAAA,EAAA,EAAA,IAAA,EAAC,SAAA,CACC,QAAS,EACT,SAAU,EACV,UAAU,qJAEV,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAW,CAAC,QAAQ,EAAE,EAAe,eAAiB,GAAA,CAAI,GACrE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,oBAGP,GACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kGACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,2BACvB,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,WAAK,iBAAe,EAAW,kBAAkB,eAM1D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDAEb,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,GAAK,MAAO,EAAI,EACxC,UAAU,iEAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6CACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAW,CAAC,qBAAqB,EACpC,EAAkB,gBAClB,EAAgB,aAAe,eAAA,CAC/B,GACF,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,kFAAyE,gBAKxF,EACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAU,wCACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,6DAAoD,kBAEpE,EACF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,yBACvB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,0CAAkC,OAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0DACZ,EAAS,MAAM,GAElB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,iCAG3E,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,6CAQjF,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,GAAK,MAAO,EAAI,EACxC,UAAU,iEAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6CACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAW,CAAC,qBAAqB,EACpC,EAAqB,gBACrB,EAAmB,aAAe,eAAA,CAClC,GACF,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,kFAAyE,mBAKxF,EACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAU,wCACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,6DAAoD,kBAEpE,EACF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,yBACvB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,0CAAkC,OAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0DACZ,EAAY,MAAM,GAErB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,oCAG3E,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,2CAQjF,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,GAAK,MAAO,EAAI,EACxC,UAAU,iEAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6CACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAW,CAAC,qBAAqB,EACpC,EAAkB,gBAClB,EAAgB,aAAe,eAAA,CAC/B,GACF,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,kFAAyE,gBAKxF,EACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAU,wCACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,6DAAoD,kBAEpE,EACF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,yBACvB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,0CAAkC,OAGpD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,0DACZ,EAAoB,MAAM,GAE7B,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,yBAG3E,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qEAA4D,sCASnF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,GAAK,MAAO,EAAI,EACxC,UAAU,iBAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACb,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,wFAA+E,sBAI7F,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,2BACvB,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,sFAA6E,gBAI7F,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,gFACZ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,kCACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,gCACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,2CAIR,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,2BACvB,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,sFAA6E,mBAI7F,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,gFACZ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,kCACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,qCACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,kCAIR,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,2BACvB,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,sFAA6E,eAI7F,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAG,UAAU,gFACZ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,+BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,6BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,0BACJ,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,UAAG,yCAQd,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAC,GAAG,CAAA,CACT,QAAS,CAAE,QAAS,EAAG,EAAG,EAAG,EAC7B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,SAAU,GAAK,MAAO,EAAI,EACxC,UAAU,gBAEV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iEACb,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,wFAA+E,0BAI7F,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,IAAI,CAAA,CAAC,UAAU,0BAChB,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,8DAAoD,gBACrD,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,gDAAuC,sDAIxE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,kDACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,wEACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,iFAAwE,aACvF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,sDAA6C,4BAG9D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sEACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,+EAAsE,gBACrF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,oDAA2C,4BAG5D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0EACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,mFAA0E,WACzF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,wDAA+C,0BAGhE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,0EACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,mFAA0E,cACzF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,wDAA+C,uCAUlF"}